package flat/datastruct

import flat/datastruct/list/List
import flat/datastruct/list/ArrayIterator

class implements List<Object> {
	visible Object[] items

	public construct(visible Object[] items) {}

	visible ArrayIterator<Object> iterator => ArrayIterator(items)

	public Object first <=> items.first
	public Object last <=> items.last

	override public contains(Object value) => items.contains(value)
	override public toArray() => items.toArray()
	override public forEach(func(Object, Int, List<Object>)) => items.forEach(func)
	override public any(anyFunc(Object, Int, List<Object>) -> Bool) => items.any(anyFunc)
	override public all(allFunc(Object, Int, List<Object>) -> Bool, Bool stopOnContradiction) => items.all(allFunc, stopOnContradiction)
	override public filter(filterFunc(Object, Int, List<Object>) -> Bool) => items.filter(filterFunc)
	override public take(Int howMany) => items.take(howMany)
	override public skip(Int howMany) => items.skip(howMany)
	override public firstWhere(func(Object) -> Bool) => items.firstWhere(func)
	override public reverse() => Tuple(items.reverse())
	override public map<Out>(mapFunc(Object, Int, List<Object>) -> Out) -> List<Out> {
		return items.map(mapFunc)
	}
}