package flat/datastruct

import flat/datastruct/list/List
import flat/operators/EqualsOperator

class ImmutableHashMap<K extends EqualsOperator, V> implements List<Pair<K, V>> {
  HashMap<K, V> map

  visible Int count => map.count

  this[K key] => map[key]

  public construct(HashMap<K, V> map) {
    this(map, true)
  }

  construct(HashMap<K, V> map, Bool clone) {
    this.map = clone ? map.clone() : map
  }

  override public toArray() => map({ _ })
  override public contains(Pair<K, V> value) => map.contains(value)
  override public any(func(Pair<K, V>) -> Bool) => map.any(func)
  override public all(func(Pair<K, V>) -> Bool, Bool stopOnContradiction) => map.all(func, stopOnContradiction)
  override public map<Out>(func(Pair<K, V>, Int, HashMap<K, V>) -> Out) => map.map(func)
  override public filter(func(Pair<K, V>, Int, HashMap<K, V>) -> Bool) => map.filter(func)
  override public skip(Int num) => map({ _ }).skip(num)
  override public take(Int num) => map({ _ }).take(num)
  override public reverse() => map({ _ }).reverse()
  override public firstWhere(func(Pair<K, V>) -> Bool) => map.firstWhere(func)
  override public forEach(func(Pair<K, V>, Int, HashMap<K, V>)) => map.forEach(func)
  override public join(
    String delimiter = "",
    var Int maxOutputCount = count,
    Int ellipsePosition = maxOutputCount / 2 + 1,
    String ellipse = "..."
  ) => map.join(delimiter, maxOutputCount, ellipsePosition, ellipse)

  public containsKey(K key) => map.containsKey(key)

  public toString() => this.class.location + " {" + map.map(p => { p.key + ": " + p.value }).join(", ") + "}"
}