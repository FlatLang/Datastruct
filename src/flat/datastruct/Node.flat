package flat/datastruct

import flat/datastruct/list

class Node<E> {
  visible Node<E>[] children

  this[Int index] <=> children[index]

  public construct(public E data = null, Int numChildren = 5) {
    children = Array<Node<E>>(numChildren)
  }

  public preorder() => preorder(E[])
  public inorder() => inorder(E[])
  public postorder() => postorder(E[])
  public levelorder() => levelorder(E[])

  preorder(E[] array) => array {
    array.add(data)

    children
      .filter({ _ != null })
      :forEach({ _.preorder(array) })
  }

  inorder(E[] array) => array {
    let Int half = children.count - children.count / 2

    children
      .take(half)
      .filter({ _ != null })
      :forEach({ _.inorder(array) })

    array.add(data)

    children
      .skip(half)
      .filter({ _ != null })
      :forEach({ _.inorder(array) })
  }

  postorder(E[] array) => array {
    children
      .filter({ _ != null })
      :forEach({ _.postorder(array) })

    array.add(data)
  }

  levelorder(E[] array) => array {
    let queue = Queue<Node<E>>([this])

    while (!queue.isEmpty) {
      let current = queue.dequeue()

      array.add(current.data)

      current.children
        .filter({ _ != null })
        :forEach({ queue.enqueue(_) })
    }
  }

  override public toString() => "#data"
}