package flat/datastruct

import flat/datastruct/list/List
import flat/datastruct/list/Iterator
import flat/datastruct/list/NoSuchElementException

class HashMap<K, V> implements List<Pair<K, V>> {
  Pair<K, V>[][] buckets

  visible var Int count

  this[K key] -> V {
    get {
      return key ? getPair(key)?.value : null
    }

    set {
      if (!key) return null

      remove(key)

      getBucket(key).add(Pair<K, V>(key, value))

      count++
    }
  }

  visible Pair<K, V>[] entries => filter({ true })
  visible K[] keys => map({ _.key })
  visible V[] values => map({ _.value })

  visible HashMapIterator<K, V> iterator => HashMapIterator(this)

  public construct(
    Int bucketCount = 5,
    private Int bucketSize = 5
  ) {
    buckets = Array<Array<Pair<K, V>>>(bucketCount).map({ Array<Pair<K, V>>(bucketSize) })
  }

  public construct(
    HashMap<K, V> source,
    Int bucketCount = 5,
    private Int bucketSize = 5
  ) {
    this(source.entries, bucketCount, bucketSize)
  }

  public construct(
    Array<Pair<K, V>> entries,
    Int bucketCount = 5,
    private Int bucketSize = 5
  ) {
    this(bucketCount, bucketSize)

    entries.forEach({ add(_x.key, _x.value) })
  }

  public add(K key, V value) => this[key] = value
  public add(Pair<K, V> pair) => this[pair.key] = pair.value
  public addAll(List<Pair<K, V>> pairs) => pairs.forEach({ add(_) })
  public addAll(HashMap<K, V> map) => map.entries.forEach({ add(_) })

  public getOrDefault(K key, defaultValue() -> V) -> V => containsKey(key) ? this[key] : add(key, defaultValue())
  public getAndRemove(K key) -> V {
    if (containsKey(key)) {
      let value = this[key]
      remove(key)

      return value
    } else {
      return null
    }
  }

  override public toArray() => map({ _ })

  public copy() => HashMap<K, V>(toArray())

  // override public contains(Pair<K, V> value) =>
  //   (let pair = getPair(value.key)) &&
  //   pair.value == value.value

  override public contains(Pair<K, V> value) -> Bool {
    if (!value.key) return false

    let pair = getPair(value.key)

    return pair && pair.value == value.value
  }

  override public any(func(Pair<K, V> x) -> Bool) => false {
    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair && func(pair)) {
          return true
        }
      }
    }
  }

  override public all(func(Pair<K, V> x) -> Bool, Bool stopOnContradiction = true) -> Bool {
    var contradiction = false

    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair && !func(pair)) {
          if (stopOnContradiction) {
            return false
          }

          contradiction = true
        }
      }
    }

    return !contradiction
  }

  override public map<Out>(func(Pair<K, V> x, Int i, HashMap<K, V> map) -> Out) -> Out[] {
    let array = Out[]

    var Int i = 0

    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair) {
          array.add(func(pair, i++, this))
        }
      }
    }

    return array
  }

  public mapValues<Out>(func(Pair<K, V> x, Int i, HashMap<K, V> map) -> Out) -> HashMap<K, Out> {
    let map = HashMap<K, Out>()

    forEach({ map.add(_x.key, func(_x, _i, this)) })

    return map
  }

  override public filter(func(Pair<K, V> x, Int i, HashMap<K, V> map) -> Bool) -> Pair<K, V>[] {
    let array = Pair<K, V>[]

    var Int i = 0

    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair && func(pair, i++, this)) {
          array.add(pair)
        }
      }
    }

    return array
  }

  override public join(
    String delimiter = "",
    var Int maxOutputCount = count,
    Int ellipsePosition = maxOutputCount / 2 + 1,
    String ellipse = "..."
  ) -> String {
    var Int i = 0

    var output = ""

    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair) {
          if (i > 0) {
            output = output + delimiter
          }

          output = output + pair
        }
      }
    }

    return output
  }

  override public skip(Int num) => map({ _ }).skip(num)
  override public take(Int num) => map({ _ }).take(num)
  override public reverse() => map({ _ }).reverse()

  override public firstWhere(func(Pair<K, V> x) -> Bool) -> Pair<K, V> => null//=>
  //buckets.firstNonNull({ _.firstWhere(pair -> pair && func(pair)) })
  {
    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair && func(pair)) {
          return pair
        }
      }
    }
  }

  override public forEach(func(Pair<K, V> x, Int i, HashMap<K, V> map)) => this {
    var Int i = 0

    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair) {
          func(pair, i++, this)
        }
      }
    }
  }

  getBucket(K key) => buckets[(Int)(key.hashCodeLong & (buckets.count - 1))]
  getPair(K key) => getBucket(key).filter({ _x && _x.key.equals(key) }).first

  public remove(K key) -> V => null {
    if (!key) return null

    let bucket = getBucket(key)

    var Int i = 0

    for (pair in bucket) {
      if (pair && pair.key.equals(key)) {
        bucket.remove(i)
        count--

        return pair.value
      } else {
        i++
      }
    }
  }

  public removeAt(Int index) -> Pair<K, V> => null {
    var Int i = 0

    for (bucket in buckets) {
      for (pair in bucket) {
        if (pair) {
          if (i == index) {
            bucket.remove(i)
            return pair
          }
          i++
        }
      }
    }
  }

  public removeWhere(func(Pair<K, V> x, Int i, HashMap<K, V> map) -> Bool) -> Pair<K, V>[] {
    return filter(func):forEach({ remove(_.key) })
  }

  public containsKey(K key) => key && getPair(key)

  public clone() => HashMap<K, V>(this)

  public toString() => "#{class.location} #{toJson()}"

  formatJsonString(var String value) -> String {
    value = "#{value}"
    external js {
      #{value.chars.data} = #{value.chars.data}.replace(/[\\]/g, "\\\\");
    }
    external java {
      #{value.chars.string} = #{value.chars.string}.replace("\\", "\\\\");
    }
    let sanitized = value

    return "\"#{sanitized}\""
  }

  mapJsonValue(Object value, Bool format, String tab) -> String {
    if (value && value.class.isOfType(String.class)) {
      return formatJsonString(value.toString())
    } else if (value && value.class.isOfType(HashMap.class)) {
      let HashMap valueMap = (HashMap)value

      return valueMap.toJson(format, tab)
    } else {
      return value.toString()
    }
  }

  public toJson(Bool: format = false, String tab = "\t") -> String {
    if (format) {
      let values = map({ "#{formatJsonString(_x.key.toString())}: #{mapJsonValue(_x.value, format, tab)}" })
        .join(",\n")
        .indent(tab: tab)

      return "|
        {
        #{tab}#{values}
        }
        |"
    } else {
      let values = map({ "#{formatJsonString(_x.key.toString())}:" + mapJsonValue(_x.value, format, tab) }).join(",")
      return "{#{values}}"
    }
  }

  override public equals(Object other) => (other || !this) && other.class.isOfType(HashMap.class) && equals((HashMap)other)
  public equals(HashMap<K, V> other) => true {
    if (count != other.count) return false

    for (element in this) {
      if (!other.contains(element)) return false
    }
  }

  class HashMapIterator<K, V> implements Iterator<Pair<K, V>> {
    visible var Int position

    var Iterator<Array<Pair<K, V>>> bucketIterator
    var Iterator<Pair<K, V>> valueIterator

    visible Bool hasNext => position < map.count && (bucketIterator.hasNext || valueIterator?.hasNext)
    visible Bool hasPrevious => bucketIterator.hasPrevious || valueIterator?.hasPrevious

    visible Pair<K, V> stepNext {
      get {
        if (valueIterator?.hasNext) {
          position++
          return valueIterator.stepNext
        } else if (bucketIterator.hasNext) {
          position++
          valueIterator = bucketIterator.stepNext.iterator
          return valueIterator.stepNext
        }

        throw NoSuchElementException()
      }
    }

    visible Pair<K, V> current => valueIterator?.current
    visible Pair<K, V> previous {
      get {
        if (valueIterator?.hasPrevious) {
          return valueIterator.previous
        } else if (bucketIterator.hasPrevious) {
          return bucketIterator.previous.last
        } else {
          return null
        }
      }
    }
    visible Pair<K, V> next {
      get {
        if (valueIterator?.hasNext) {
          return valueIterator.next
        } else if (bucketIterator.hasNext) {
          return bucketIterator.next.first
        } else {
          return null
        }
      }
    }

    public construct(visible HashMap<K, V> map) {
      reset()
    }

    public reset() => this {
      position = 0
      bucketIterator = map.buckets.iterator
      valueIterator = bucketIterator.hasNext ? bucketIterator.stepNext.iterator : null
    }
  }
}