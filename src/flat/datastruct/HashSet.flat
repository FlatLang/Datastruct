package flat/datastruct

import flat/datastruct/list/List
import flat/datastruct/list/Iterator
import flat/datastruct/list/NoSuchElementException
import flat/operators/EqualsOperator

class HashSet<T extends EqualsOperator> implements List<T> {
  T[][] buckets

  visible Int size

  visible HashSetIterator<T> iterator => HashSetIterator(this)

  public construct(Int bucketCount = 5, private Int bucketSize = 5) {
    buckets = Array(bucketCount).map({ Array<T>(bucketSize) })
  }

  public construct(T[] values, Int bucketCount = 5, private Int bucketSize = 5) {
    this(bucketCount, bucketSize)
    values.forEach({ add(_) })
  }

  override public toArray() => map({ _ })

  override public any(func(T) -> Bool) => false {
    for (bucket in buckets) {
      for (v in bucket) {
        if (v && func(v)) {
          return true
        }
      }
    }
  }

  override public all(func(T) -> Bool, Bool stopOnContradiction = true) -> Bool {
    var contradiction = false

    for (bucket in buckets) {
      for (v in bucket) {
        if (v && !func(v)) {
          if (stopOnContradiction) {
            return false
          }

          contradiction = true
        }
      }
    }

    return !contradiction
  }

  override public map<Out>(func(T, Int, HashSet<T>) -> Out) -> Out[] {
    let array = Out[]

    var Int i = 0

    for (bucket in buckets) {
      for (v in bucket) {
        if (v) {
          array.add(func(v, i++, this))
        }
      }
    }

    return array
  }

  override public filter(func(T, Int, HashSet<T>) -> Bool) -> T[] {
    let array = T[]

    var Int i = 0

    for (bucket in buckets) {
      for (v in bucket) {
        if (v && func(v, i++, this)) {
          array.add(v)
        }
      }
    }

    return array
  }

  override public join(
    String delimiter = "",
    var Int maxOutputCount = count,
    Int ellipsePosition = maxOutputCount / 2 + 1,
    String ellipse = "..."
  ) -> String {
    var Int i = 0

    var output = ""

    for (bucket in buckets) {
      for (v in bucket) {
        if (v) {
          if (i > 0) {
            output = output + delimiter
          }

          output = output + v
        }
      }
    }

    return output
  }

  override public skip(Int num) => map({ _ }).skip(num)
  override public take(Int num) => map({ _ }).take(num)
  override public reverse() => map({ _ }).reverse()

  override public firstWhere(func(T) -> Bool) -> T => null {
    for (bucket in buckets) {
      for (v in bucket) {
        if (v && func(v)) {
          return v
        }
      }
    }
  }

  override public forEach(func(T, Int, HashSet<T>)) => this {
    var Int i = 0

    for (bucket in buckets) {
      for (v in bucket) {
        if (v) {
          func(v, i++, this)
        }
      }
    }
  }

  getBucket(T value) => buckets[(Int)(value.hashCodeLong & (buckets.count - 1))]

  public add(T value) => value {
    getBucket(value).add(value)
  }

  public addIfNotExists(T value) => false {
    if (!contains(value)) {
      add(value)
      return true
    }
  }

  public get(T value) => getBucket(value).firstWhere(x => { x && x.equals(value) })

  public remove(T value) -> T => null {
    T[] bucket = getBucket(value)

    var Int i = 0

    for (v in bucket) {
      if (v && v.equals(value)) {
        bucket.remove(i)

        return v
      }

      i++
    }
  }

  override public contains(T value) => value && get(value)

  public toString() => "HashSet [#{join(", ")}]"

  class HashSetIterator<K> implements Iterator<K> {
    visible var Int position

    var Iterator<Array<K>> bucketIterator
    var Iterator<K> valueIterator

    visible Bool hasNext => position < set.count && (bucketIterator.hasNext || valueIterator?.hasNext)
    visible Bool hasPrevious => bucketIterator.hasPrevious || valueIterator?.hasPrevious

    visible K stepNext {
      get {
        if (valueIterator?.hasNext) {
          position++
          return valueIterator.stepNext
        } else if (bucketIterator.hasNext) {
          position++
          valueIterator = bucketIterator.stepNext.iterator
          return valueIterator.stepNext
        }

        throw NoSuchElementException()
      }
    }

    visible K current => valueIterator?.current
    visible K previous {
      get {
        if (valueIterator?.hasPrevious) {
          return valueIterator.previous
        } else if (bucketIterator.hasPrevious) {
          return bucketIterator.previous.last
        } else {
          return null
        }
      }
    }
    visible K next {
      get {
        if (valueIterator?.hasNext) {
          return valueIterator.next
        } else if (bucketIterator.hasNext) {
          return bucketIterator.next.first
        } else {
          return null
        }
      }
    }

    public construct(visible HashSet<K> set) {
      reset()
    }

    public reset() => this {
      position = 0
      bucketIterator = set.buckets.iterator
      valueIterator = bucketIterator.hasNext ? bucketIterator.stepNext.iterator : null
    }
  }
}