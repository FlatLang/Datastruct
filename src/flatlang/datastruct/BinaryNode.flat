package "flatlang/datastruct"

import "flatlang/datastruct/Comparable"

[AutoFinal]
class BinaryNode<E extends Comparable> extends Node<E> {
    /**
     * The left child of the BinaryNode instance.
     */
    public var BinaryNode<E> left <=> (BinaryNode)(this[0])

    /**
     * The right child of the BinaryNode instance.
     */
    public var BinaryNode<E> right <=> (BinaryNode)(this[1])

    public construct(E data = null) => this(data, 2)

    construct(E data, Int size) => super(data, size)

    getNode(Int index) =>
    	children.count > index ?
    		(BinaryNode)children[index] :
    		null

    setNode(Int index, BinaryNode<E> data) {
        if (children.count <= index)
            children.add(index, data)
        else
            children[index] = data
    }

    public addChild(E data) {
        if (this.data.compareTo(data) >= 0) {
            if (left)
                left.addChild(data)
            else
                left = BinaryNode(data)
        } else {
            if (right)
                right.addChild(data)
            else
                right = BinaryNode(data)
        }
    }
}