package "flatlang/datastruct/list"

import "flatlang/datastruct/list/Iterator"
import "flatlang/datastruct/list/NoSuchElementException"

class LinkedListIterator<E> implements Iterator<E> {
    visible var ListNode position
    visible var ListNode previousNode

    visible Bool hasNext => position != null
    visible Bool hasPrevious => previousNode != null

    visible E stepNext {
        get {
            if (hasNext) {
                E data = position.data

                previousNode = position
                position = position.next

                return data
            }

            throw NoSuchElementException()
        }

        no set
    }

    visible E current => position?.data
    visible E next => position?.next?.data
    visible E previous => previousNode?.data

    public construct(private LinkedList<E> list) {
        reset()
    }

    public reset() => this {
        position = list.first
    }
}